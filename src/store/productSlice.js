// Import necessary modules and constants for Redux state management.
import { createSlice } from "@reduxjs/toolkit";
import { BASE_URL } from "../utils/apiURL";
import { STATUS } from "../utils/status";

// Create a Redux slice for managing product data and loading status.
const productSlice = createSlice({
    // Define the name of the slice.
    name: "product",
    // Set the initial state of the slice.
    initialState: {
        data: [],           // Array to store product data.
        status: STATUS.IDLE, // Initial loading status.
    },

    // Define reducer functions to handle state updates.
    reducers: {
        // Reducer to update product data in the state.
        setProducts(state, action) {
            state.data = action.payload;
        },
        // Reducer to update loading status in the state.
        setStatus(state, action) {
            state.status = action.payload;
        },
    },
});

// Extract action creators from the slice.
export const { setProducts, setStatus } = productSlice.actions;

// Export the reducer function generated by the slice.
export default productSlice.reducer;

// Thunk action creator for fetching products from the API.
export const fetchProducts = () => {
    return async function fetchProductThunk(dispatch) {
        // Dispatch action to set loading status to "loading".
        dispatch(setStatus(STATUS.LOADING));
        try {
            // Fetch product data from the API.
            const response = await fetch(`${BASE_URL}products`);
            const data = await response.json();
            // Dispatch action to update product data in the state.
            dispatch(setProducts(data));
            // Dispatch action to set loading status back to "idle".
            dispatch(setStatus(STATUS.IDLE));
        } catch (error) {
            // If there's an error during fetch, set status to "error".
            dispatch(setStatus(STATUS.ERROR));
        }
    };
};
